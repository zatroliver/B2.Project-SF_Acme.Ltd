Git instruction

# Установка GIT:
	apt install git 

# Получение помощи по командам:
	git help <команда>
	git <команда> --help
	man git-<команда>

# Генерация SSH-ключа и вывод в консоль:
	ssh-keygen
	cat ~/.ssh/id_rsa.pub

# Конфигурирование git:
	# Настройки Git имеют три уровня:
	a) Параметры из файла [path]/etc/gitconfig (системные) могут работать для всех 	пользователей системы и репозиториев. Они редактируются командой git config —system.
	b) Параметры из файла ~/.gitconfig или ~/.config/git/config (глобальные) применяются к одному пользователю, если запустить команду git config —global.
	c) Локальные параметры из файла config в рабочем каталоге .git/config сохраняют только 	для выбранного репозитория. Ему соответствует команда git config —local.
	# Команда для вывода всей используемой конфигурации и файла, в котором они заданы:
		git config --list --show-origin
	# Команды для настройки конфигурационного файла .gitconfig:
	# Имя пользователя:
		git config --global user.name "[firstname lastname]" 
	# Электронная почта:
		git config --global user.email "[valid-email]"
	# Задать текстовый редактор (emacs, vim, nano):
		git config --global core.editor <editor>
	# Задать merge инструмент:
		git config --global merge.tool meld
	# Смена имени "золотой ветки" с master на main:
		git config --global init.defaultBranch main
	# Создание шаблома текстового сообщения при внесении изменений:
		git config --global commit.template ~/.gitmessage.txt
	# Конфигурация позволит использовать CRLF переносы строк в Windows, при этом в репозитории и системах Mac и Linux будет использован LF:
		git config --global core.autocrlf input
	# Создание псевдонима (alias) для команды git checkout
		git config --global alias.ch checkout
	# Создание псевдонима (alias) для команды git branch
		git config --global alias.br branch
	# Создание псевдонима (alias) для команды git commit
		git config --global alias.co commit
	# Создание псевдонима (alias) для команды git status 
		git config --global alias.st status
	# Позволяет посмотреть историю коммитов:
		git config --global alias.history 'log --graph'
	# Позволяет исключить файл из индекса:
		git config --global alias.unadd 'reset HEAD --'
	# Позволяет посмотреть только последний коммит:
		git config --global alias.last 'log -1 HEAD --'

# Начальные действия по созданию локального репозитория:
	# Создание директории и инициализация локального репозитория (подкаталога .git):
		mkdir <directory_name>
		git init <directory_name>
	# Удаление директории для локального репозитория:
		cd <directory_name>
		rm -rf .git
	# Клонирование полного удаленного репозитория в указанную директорию:
		git clone <url> [directory_name]
	# Клонирование n кол-ва коммитов конкретной ветки удаленного репозитория в указанную директорию:
		git clone --depth=<n> --branch=<branch_name> <url> [directory_name]

# Работа с локальным репозиторием:
	# Посмотреть статус изменений репозитория:
		git status
	# Посмотреть изменения репозитория в конкретном файле:
		git diff <file>
	# Индексация конкретного файла или всех файлов с изменениями для следующего коммита:
		git add <file>
		git add .
	# Коммит (фиксирование изменений) в репозитории с последующим описанием в редакторе:
		git commit 
	# Коммит в репозитории с описанием вне редактора:
		git commit -m "commit_message"
	# Изменение последнего коммита, добавление --no-edit позволит не менять описание: 
		НЕ ИСПОЛЬЗОВАТЬ С ЗАПУШЕННЫМИ КОММИТАМИ 
		git commit -a --amend
	# Переместить незакоммиченные изменения в хранилище--include-untracked:
		git stash push  
	# Применить изменения из хранилища, очистив его: 
		git stash pop	
	# Применить изменения из хранилища, не очищая его:
		git stash apply
	# Удалить изменения в хранилище:
		git stash drop
	# Перенести изменения из хранилища в ветку:
		git stash branch

# Просмотр истории коммитов:
	# Посмотреть перечень коммитов для текущей ветки от последнего к первому:
		git log
	# Посмотреть перечень коммитов (hash and commit message):
		git log --oneline
	# Посмотреть перечень коммитов от автора:
		git log --author="username"
	# Посмотреть перечень коммитов конкретного файла:
		git log -p <file>
	# Посмотреть кто, что и когда изменил в файле:
		git blame <file>
	# Вывод истории вливания коммитов, переключений между ветками и тд:
		git reflog show

# Работа с ветками. Создание и переключение между ветками:
	# Посмотреть наименования всех существующих веток:
		git branch
	# Создать ветку из текущей HEAD ветки:
		git branch <new-branch>
	# Удалть ветку:
		git branch -d <new-branch> 
		# -D для форсированного удаления.
	# Переименовать ветку:
		git branch -m <old-branch-name> <new-branch-name>	
	# Сменить HEAD ветку:
		git checkout <branch>
	# Сменить ветку для одного файла 
		git checkout <branch> -- <filename>
	# Создать ветку и сразу переключиться на нее:
		git checkout -b <branch>
	# Принять конкретный коммит из другой ветки по хэшу коммита:
		git cherry-pick <commit hash>

# Связь между локальным и удаленным репозиториями:
	# Просмотр всех текущих подключенных удаленных репозиториев:
		git remote -v
	# Просмотр информации об удаленном репозитории:
		git remote show <remote>
	# Подключение удаленного репозитория:
		git remote add <remote> <url>
	# Смена имени удаленного репозитория:
		git remote rename <remote> <new_remote>
	# Удалить связь локального репозитория с удаленным репозиторием:
		git remote rm <remote>
	# Скачать изменения из удаленного репозитория, но не сливать их с HEAD веткой локального репозитория (для вливания ветки git merge <branch>):
		git fetch <remote>
	# Получить из удаленного репозитория обновление HEAD-ветки (текущей) для локального репозитория:
		git pull origin master		
	# Получить из удаленного репозитория обновление HEAD-ветки (текущей) для локального репозитория без сливания веток:
		git pull --rebase <remote> <branch> 
	# Публикация изменений локального репозитория в удаленный репозиторий:
		git push <remote> <branch>
	# Удалить ветку в удаленном репозитории:
		git push <remote> --delete <branch>

# Вливание и замена веток:
	# Для решения конфликтов используется merge инструмент:
		git mergetool
	# Влить ветку <branch> в HEAD ветку: 
		git merge <branch>
	# Вернуть ветку в состояние до вливания:
		git merge --abort
	# Список влитых веток:
		git branch --merged
	# Заменить HEAD ветку на ветку <branch> (нельзя заменять опубликованные коммиты!):
		git rebase <branch>
	# Отмена замены HEAD ветки веткой <branch>:
		git rebase --abort
	# Продолжить замену HEAD ветки веткой <branch>, после разрешения возникшей проблемы (не забыть индексировать измененный файлы git add <resolved-file>):
		git rebase --continue

# Отмены действий и возврат к состоянию:
	# Отменить индексацию файлов (undo последнего git add):
		git reset HEAD
	# Отменить все локальные изменения в рабочей директории:
		git reset --hard HEAD
	# Отменить локальные изменения в конкретном файле:
		git checkout HEAD <file>
	# Переключает HEAD ветку на состояние указанного коммита и сбрасывает все изменения (изменения сохраняются в истории git):
		git reset <commit>
	# Переключает HEAD ветку на новый комит, состояние которого воспроизводит состояние указанного коммита (отменяет все последующие изменения):
		git revert <commit>
	# Переключает HEAD ветку на состояние указанного коммита и отменяет все изменения:
		git reset --hard <commit>
